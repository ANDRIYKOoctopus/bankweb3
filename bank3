// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Marketplace {
    struct Item {
        uint256 id;
        string name;
        uint256 price;
        address payable seller;
        bool sold;
    }

    mapping(uint256 => Item) public items;
    uint256 public itemCount;

    event ItemListed(uint256 id, string name, uint256 price, address seller);
    event ItemSold(uint256 id, address buyer);

    function listItem(string memory name, uint256 price) public {
        require(price > 0, "Price must be greater than zero");

        itemCount++;
        items[itemCount] = Item(itemCount, name, price, payable(msg.sender), false);

        emit ItemListed(itemCount, name, price, msg.sender);
    }

    function buyItem(uint256 id) public payable {
        Item storage item = items[id];
        require(item.id > 0 && item.id <= itemCount, "Item does not exist");
        require(msg.value == item.price, "Incorrect price sent");
        require(!item.sold, "Item already sold");

        item.seller.transfer(msg.value);
        item.sold = true;

        emit ItemSold(id, msg.sender);
    }

    function getItems() public view returns (Item[] memory) {
        Item[] memory itemList = new Item[](itemCount);
        for (uint256 i = 1; i <= itemCount; i++) {
            itemList[i - 1] = items[i];
        }
        return itemList;
    }
}
